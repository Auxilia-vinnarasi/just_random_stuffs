MONGODB_URL=mongodb+srv://john:john123@cluster0.bg8rf.mongodb.net/nodejs_auth?retryWrites=true&w=majority
OR
(mongodb://localhost:27017/ecom_test
OR
if any errors
cmd===>mongod
mongodb://127.0.0.1:27017/ecom_test
)
????????????????????????????????????????????????????????????????
npm init -y
npm install express mongoose dotenv 
npm install nodemon --save -dev

server.js
const mongoose=require("mongoose");
require("dotenv/config");
const app=require("./app");

mongoose.connect(process.env.MONGODB_URI,{
            useNewUrlParser:true,
            useUnifiedTopology:true,
})
.then(()=>console.log("Mongodb connected successfully.."))
.catch(()=>console.log("MongoDb not connected successfully..."))

const PORT=process.env.PORT || 3000;

app.listen(PORT,()=>{
    console.log(`App is listening on port ${PORT}`);
});

app.js
const express=require("express");
const cors=require("cors");
const bodyParser=require("body-parser");
const cookieParser=require("cookie-parser")
const app=express();

const userRouter=require("./Routers/userRouter");
const productRouter=require("./Routers/productRouter");
const categoryRouter=require("./Routers/categoryRouter");
const cartRouter=require("./Routers/cartRouter");
const orderRouter=require("./Routers/orderRouter");
//const cartRouter=require("./Routers/cartRouter");
//const itemRouter=require("./Routers/itemRouter");

//middleware
app.use(express.json());
app.use(cors("corsOptions"));
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({extended:true}));
app.use(cookieParser());

//we have to set the endpoints so that any req coming with 
//the url/api this can be send to this user,product,category,cart, order route.
app.use("/api/user",userRouter);
app.use("/api/product",productRouter);
app.use("/api/category",categoryRouter);
app.use("/api/cart",cartRouter);
app.use("/api/order",orderRouter);

app.get("/",(req,res)=>{
    res.send("E-commerce website creation in backend...")
});
module.exports=app;

Routers=>cartRouter.js
const router=require("express").Router();
//router or routing: it refers to how the applications endpoint refers to client request.
const cartController=require("../controllers/cartController");

router.post("/create_cart",cartController.createCart);
router.put("/updatecart/:id",cartController.updateCart);
router.get("/getallprod",cartController.getAllProd);
router.delete("/deletecart/:id",cartController.deleteCart);
router.get("/getusercart/:userId",cartController.getUserCart);

module.exports=router;
???????????????????????????????????????????????????????????????????????
server.js

require("dotenv").config({path:"./config.env"})

const express=require("express");
const connectDB=require("./config/db");

//connect DB
connectDB();

const app=express();

//this is the middleware which is allows us to get the data from the body (ie) req.body
app.use(express.json());

app.use("/api/auth",require("./routes/auth"));

const PORT=process.env.PORT || 5000;

//get request for checking server
app.get("/",(req,res)=>{
    res.send("App is working ....")
})

 const server=app.listen(PORT,()=>{
    console.log(`App is listening on port ${PORT}`);
})

//for nicely done error im creating this
process.on("unhandledRejection",(err,promise)=>{
    console.log(`Logged Error:${err}`);
    server.close(()=>process.exit(1));
})

routes=>auth.js
const express=require("express");
const router=express.Router();

const {register, login, forgotPassword, resetPassword}=require("../controllers/auth");

router.route("/register").post(register);

//router.post("/register",)
router.route("/login").post(login);

router.route("/forgotpassword").post(forgotPassword);

router.route("/resetpassword/:resetToken").put(resetPassword);

module.exports=router;
???????????????????????????????????????????????????????????????????
JWT - random digits for secrets:
in node cmd we have to run below commands
require("crypto").randomBytes(35).toString("hex")//because its gonna written buffer so that toString
adadaodkoweirgdmsdmg4535232323121290sdlskdlsk;dl;
????????????????????????????????????????????????????????????????????
Pushing Git commands
Go to that project page and write click git bash 
1>$git init
2>git add .
3>git status
4>git commit -m "first commit"
5>gir remote add origin https://github.com/
6>git push -u origin master
Then it is created
if it's remote origin already exits: ERROR
1>git remote --verbose
2>git remote set-url origin http://
3>git remote --verbose
4>git add .
5>git commit -m "first commit"
6>git push origin master
if we give git add . =>warning=>It will be replaced by CRLF in the file
solution==>git config core.autocrlf true
????????????????????????????????????????????????????????????????????????????
mongodb Dump:
download:https://www.mongodb.com/try/download/database-tools?tck=docs_databasetools
cmd:==>1>set path="C:\Program Files\MongoDB\Server\6.0\bin"
==>2>mongodump
mongodump --uri=mongodb+srv://xxx:yyy@cluster0-whatever.mongodb.net
?????????????????????????????????????????????????????????????????????????????
javascript functions:
array.map() is returning elements all together in React JS
const Test=()=>{
const array=["Hello","Mynameis"]
return (<>
{
array.map((arr)=>{
return( <>
<div>{arr}</div>
<buttn>Edit</div>
</>
)
})
}
</>
)
}
??????????????????????????????????????????????????????????????????????????????????
function App() {
  const array = ['hello', 'myNameIs'];
  return array.map(item => (
    <div key={item}>
      {item} <button>Edit</button>
    </div>
  ));
}

ReactDOM.render(<App />, document.getElementById("root"));
???????????????????????????????????????????????????????????????????????????????????
JSON.parse()-->It takes an JSON string and transforms into js object
const userStr={"user":"AUxi","location":"chennai"}
json.parse(userStr)
output==>{user:"Auxi",location:"chennai"}
user:"Auxi"
location:"chennai"
>>>>>>>>>>>>>>>>>>>>>>>
Json.stringify()--->it takes js obj and transforms into JSON string
const userObj={user:"Auxi",location:"chennai"}
json.stringify(userObj);
output-=====>{"user":"Auxi","location":"chennai"}
????????????????????????????????????????????????????????????????????????????????????
mkdir prj_name
cd proj_name npx create-react-app client
cd client
npm start - localhost:3000 its running
delete app.js inside app 
get rid of inside index.css,inside app.css
delete app.css
get reid of all comments in public->index.html
change title
npm modules installation
axios-for performing the api request
npm i axios antd redux react-redux @reduxjs/toolkit react-router-dom
building ui components - antd
normal css styling purpose - Bootstrap
bootstrap csn -->css ,copy paste link in index.html->head
icons-remix icon
remix icon website, get started,copy paste css link in index.html head
NOw we have all modules we gonna use it for frontend
checking antd is working or not--->go to antd website copy paste button in app.js-its working good
checking bootstrap working or not-->app m-5
src->pages folder,reusable thing->components,external stylesheet,image,css file->resources,redux-state management
backend setup-npm init
npm i express(backend_routing), mongoose(db comm),jsonwebtoken(authentication),bcryptjs(hashing the pw),nodemailer-sendong bus tkt,notification to the mailid.
write entry point for backend ie server.js
create .env file, npm i dotenv, npm i nodemon,require dotenv in server.js
route file->nodemon server-->App is listening on port.
backend folder structure-->route,models,config(connection db,third party library connection),utils(helpers),middlewares
mongodb atlas-create db, go to overview connect..then select connect with mongodb compass copy paste in compass gui.
mongodb connection
import {BrowserRouter,Routes,Route} from "react-router-dom";in App.js and add paths also;like <Route path="/" element={<Home/>}/>
Resources:-->auth.css(for specific page and components) global css- whole application styling.
login ,registration,import global css here.
font-google fonts-montserrat-select this medium-500 import this url in index.css and *{font-family: 'Montserrat', sans-serif!important}make it important
index.css-->:root{--primary:#27493e}
written api in backend;
to connect backend with frontend..
client,src-->package.json-->"proxy":"http://localhost:5000/"
after adding anything in the package.json u have to restart the server.

this is for ticket-booking
???????????????????????????????????????????????????????????????????????????????????????????????????????????????
mongo --version
mongod
minimise this mongod
open new cmd prompt and do below
mongo --host localhost:27017
???????????????????????????????????????????
Node.js is an event-based, non-blocking, asynchronous I/O framework that uses Google's V8
JavaScript engine. It is used for developing applications that make heavy use of the ability to run
JavaScript both on the client, as well as on server side and therefore benefit from the re-usability
of code and the lack of context switching. It is open-source and cross-platform. Node.js
applications are written in pure JavaScript and can be run within Node.js environment on
Windows, Linux etcâ€¦
??????????????????????????????????????????????????????????????????
moment for date
const date=Date.now();
const formatedDate=moment(date).format("DD/MM/YYYY");
????????????????????????????????????????????????????????????????
nodejs-postgressql-express:
1.search==>sql shell will open.....psql...enter...
2.password:password..
3.\conninfo
4.\l
5.CREATE DATABASE students;
6.\c students;----for connecting the database;
7.\! cls...for clearing
8.CREATE TABLE students(
students(# ID SERIAL PRIMARY KEY,
students(# name VARCHAR(255),
students(# email VARCHAR(255),
students(# age INT,
students(# dob DATE);
CREATE TABLE
Now created table...
9.for display table:
\dt
10.INSERT INTO students (name,email,age,dob)
postgres automatically calculate id...
11.VALUES ('Joe','joe@gmail.com',48,'1973-04-04'),('Auxi','auxi@gmail.com',31,'1991-07-06');
12.SELECT * FROM students;
???????????????????????????????????????????????????????????????????????????????????????????????????
Map functionality example: in react js

 export function myFiles(){
 const[data,setData]=useState([]);
 useEffect(()=>{
     const url="http://localhost:4000/folder/products/name";
    fetch(url)
    .then(res=>res.json())
    .then(json=>{
     setData(json);
    })
 },[]);
 console.log(data);
 return(
     <div>

         <div className="container">
             <div className="row gap-3">
                 {
                     data.map((Folder,index)=>{
                         <div className="col-4 d-flex justify-content-center">
                             <p>
                                 {Folder.folder}
                             </p>
                             </div>
                     })
                 }
             </div>
         </div>
     </div>
 )
 }
??????????????????????????????????????????????????????????????????????????????????????????????????????
swagger
npm i swagger-jsdoc@6.0.0 --save
npm i swagger-ui-express --save
/////////////////////////////////////////////////
swagger for nestJs:
for testing purpose
1.U have to create npm i swagger-ui-express npm install --save @nestjs/swagger
2.create document and config for swagger builder
3.see nestjs-->nestmodel
??????????????????????????????????????

//import model here

const product=async(req,res)=>{
    try{
        const product={
            _id:new mongoose.Types.ObjectId(),
            name:req.body.name,
            desc:req.body.desc,
            category:req.body.category,
            price:req.body.price,
            inStock:req.body.inStock,
            sku:req.body.sku,
            coverImage:req.body.coverImage,
            created_by:req.body.created_by
        }
        const newProduct=await Product.create(product);
        return res.status(200).json({
            success:true,
            message:"Product created successfully",
            newProduct,
        })
    }
    catch(err){
        console.log(err);
        return res.status(500).json({
            success:false,
            status:500,
            message:"Error" +err,
        })
    }
}

const editProduct=async(req,res)=>{
    try{
const editedProduct=await Product.findByIdAndUpdate(
    {_id:req.params.id},
    {$set:req.body},
    {new:true}
);
return res.status(200).json({
    message:"product edited successfully",
    success:true,
    status:200,
    editedProduct
})
    }
    catch(err){
        console.log(err);
        return res.status(500).json({
            success:false,

        })
    }
}

























